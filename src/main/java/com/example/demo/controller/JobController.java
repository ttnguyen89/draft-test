package com.example.demo.controller;

import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.Collections;
import java.util.List;
import java.util.Optional;
import java.util.stream.Collectors;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.bind.annotation.ResponseStatus;
import org.springframework.web.bind.annotation.RestController;

import com.example.demo.model.Job;
import com.example.demo.repository.JobRepository;

@Controller
@RequestMapping(path = "/jobs") // renvoie les valeurs d√©finies dans la classe ici
public class JobController {
	@Autowired // This means to get the bean called userRepository
	// Which is auto-generated by Spring, we will use it to handle the data
	private JobRepository jobRepository;

	@GetMapping(path="")
	public @ResponseBody Iterable<Job> getAllJobs(@RequestParam(value="minSalary", required=false) BigDecimal minSalary) {
		Iterable<Job> allJobs = jobRepository.findAll();
		if(minSalary != null) {
			List<Job> listJob = new ArrayList<>();
			allJobs.forEach(listJob::add);
			return listJob.stream()
					.filter(job -> job.getMinSalary().compareTo(minSalary) > 0)
					.sorted((job1, job2) -> job2.getMaxSalary().compareTo(job1.getMaxSalary()))
					.collect(Collectors.toList());
		}
		
		return allJobs;

	}
	
	@PutMapping(path="/{id}")// permet de modifier la valeur de Job
	public @ResponseStatus void modifyJob(@PathVariable("id") String jobId, @RequestBody Job jobValue) {
		Optional<Job> job = jobRepository.findById(jobId);
		if(job.isPresent()) {
			job.get().setJobTitle(jobValue.getJobTitle()); //  on modifie juste le titre du Job
			jobRepository.save(job.get());
		}
	}
	
}
